name: Weekly PyPI Release  
  
on:  
  schedule:  
    - cron: '1 0 * * 1'  # Every Monday at 00:01 UTC  
  workflow_dispatch:  # Allow manual triggers  
  
jobs:  
  build-and-publish:  
    runs-on: ubuntu-latest  
    environment: pypi  
    permissions:  
      contents: write  
      id-token: write  
  
    steps:  
      - uses: actions/checkout@v4  
        with:  
          fetch-depth: 0  # Important to get full git history  
  
      - name: Set up Python  
        uses: actions/setup-python@v5  
        with:  
          python-version: '3.10'  
  
      - name: Generate version number  
        id: version  
        run: python .github/scripts/generate_version.py  
  
      - name: Update pyproject.toml version  
        run: |  
          sed -i "s/^version = .*/version = \"${PYPI_VERSION}\"/" pyproject.toml  
          git config --global user.name "GitHub Actions"  
          git config --global user.email "actions@github.com"  
          git commit -am "Weekly version bump: ${PYPI_VERSION}"  
          git push  
  
      # First generate release notes using the previous tag  
      - name: Generate Release Notes (Draft)  
        id: draft-release  
        uses: release-drafter/release-drafter@v6  
        with:  
          config-name: release-drafter.yml  
          name: v${{ steps.version.outputs.PYPI_VERSION }}  
          tag: v${{ steps.version.outputs.PYPI_VERSION }}  
          version: ${{ steps.version.outputs.PYPI_VERSION }}  
        env:  
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
  
      # Then create the actual tag  
      - name: Create Git tag  
        run: |  
          git tag -a v${{ steps.version.outputs.PYPI_VERSION }} -m "Weekly release v${{ steps.version.outputs.PYPI_VERSION }}"  
          git push origin v${{ steps.version.outputs.PYPI_VERSION }}  
  
      - name: Install poetry  
        run: |  
          curl -sSL https://install.python-poetry.org | python3  
          poetry --version  
  
      - name: Build package  
        run: poetry build  
  
      - name: Publish to PyPI  
        uses: pypa/gh-action-pypi-publish@release/v1  
        with:  
          packages-dir: dist/  
          verbose: true  
  
      # Finally, publish the draft release using our external script  
      - name: Publish Release  
        uses: actions/github-script@v6  
        with:  
          script: |  
            const publishRelease = require('./.github/scripts/publish-release.js');  
            await publishRelease({github, context});  
        env:  
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
          RELEASE_ID: ${{ steps.draft-release.outputs.id }}  
